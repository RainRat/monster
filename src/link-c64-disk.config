SYMBOLS {
  # the maximum size of a single line (also the size of the line buffer)
  __LINESIZE__:  type = export, value = 40;
}

MEMORY {
  LINEBUFF:
    start = $0400
    size = __LINESIZE__*3;

  INIT:
    start = $07ff
    size  = $97ff
    fill  = no;

  RAM:
    start = $0801
    size  = $f7ff;

  APPRAM:
    start = $0801
    size  = $f7ff;
}

SEGMENTS {
	# SETUP (for bootloader)
	SETUP: load = INIT, define = yes;

	# DATA SEGMENTS
	DATA:     load = INIT, run = APPRAM, type = rw, define = yes;

	# RODATA SEGMENTS
	RODATA: load = INIT, run = APPRAM, type = ro, define = yes;

	# CODE SEGMENTS
	IRQ:            load = RAM, run = APPRAM, type = ro, define = yes;
	DEBUGGER:       load = RAM, run = APPRAM, type = ro, define = yes;
	DEBUGINFO_CODE: load = RAM, run = APPRAM, type = ro, define = yes;
	CODE:           load = RAM, run = APPRAM, type = ro, define = yes;
	COPYBUFF:       load = RAM, run = APPRAM, type = ro, define = yes;
	MACROCODE:      load = RAM, run = APPRAM, type = ro, define = yes;
	CONSOLE:        load = RAM, run = APPRAM, type = ro, define = yes;
	LABELS:         load = RAM, run = APPRAM, type = ro, define = yes;
	LINKER:         load = RAM, run = APPRAM, type = ro, define = yes;
	BANKCODE:       load = RAM, run = APPRAM, type = ro, define = yes;
	BANKCODE2:      load = RAM, run = APPRAM, type = ro, define = yes;

	# BSS SEGMENTS
	LINEBUFF: load = LINEBUFF, type = bss;

	BSS:          load = APPRAM, type = bss, define = yes;
	LABEL_BSS:    load = APPRAM, type = bss;
	LABELNAMES:   load = APPRAM, type = bss;
	DEBUGINFO:    load = APPRAM, type = bss;
	COPYBUFF_BSS: load = APPRAM, type = bss, define = yes;
	SHAREBSS:     load = APPRAM, type = bss;
	CONSOLE_BSS:  load = APPRAM, type = bss;
	MACROBSS:     load = APPRAM, type = bss;
	SOURCE:       load = APPRAM, type = bss;
	LINKER_BSS:   load = APPRAM, type = bss, define = yes;
	NMI_HANDLER:  load = APPRAM, type = bss, define = yes;
}
