SYMBOLS {
  # the maximum size of a single line (also the size of the line buffer)
  __LINESIZE__:  type = export, value = 40;
}

MEMORY {
  LINEBUFF:
    start = $0800
    size = __LINESIZE__*3+1;
  SPARE:
    start = $900
    size = $1000;

  RAM:
    start = $07ff
    size  = $f7ff
    fill  = no;

  LABELS_BANK:
    start = $000000
    size  = $ffff;

  OBJ_BANK:
    start = $000000
    size  = $ffff;
}

SEGMENTS {
	# SETUP (for bootloader)
	SETUP: load = RAM, define = yes;

	# DATA SEGMENTS
	DATA: load = RAM, run = RAM, type = rw, define = yes;

	# RODATA SEGMENTS
	RODATA: load = RAM, run = RAM, type = ro, define = yes;

	# CODE SEGMENTS
	IRQ:            load = RAM, run = RAM, type = ro, define = yes;
	DEBUGGER:       load = RAM, run = RAM, type = ro, define = yes;
	DEBUGINFO_CODE: load = RAM, run = RAM, type = ro, define = yes;
	CODE:           load = RAM, run = RAM, type = ro, define = yes;
	COPYBUFF:       load = RAM, run = RAM, type = ro, define = yes;
	MACROCODE:      load = RAM, run = RAM, type = ro, define = yes;
	CONSOLE:        load = RAM, run = RAM, type = ro, define = yes;
	EXPR:           load = RAM, run = RAM, type = ro, define = yes;
	LABELS:         load = RAM, run = RAM, type = ro, define = yes;
	LINKER:         load = RAM, run = RAM, type = ro, define = yes;
	OBJCODE:        load = RAM, run = RAM, type = ro, define = yes;
	BANKCODE:       load = RAM, run = RAM, type = ro, define = yes;
	BANKCODE2:      load = RAM, run = RAM, type = ro, define = yes;

	# BSS SEGMENTS
	LINEBUFF: load = LINEBUFF, type = bss;
	SPARE: load = SPARE, type = bss;

	SHAREBSS:       load = RAM, type = bss;
	BSS_NOINIT:     load = RAM, type = bss, define = yes;
	BSS:            load = RAM, type = bss, define = yes;
	# NMI_HANDLER:  load = RAM, type = bss, define = yes;

	# main memory variables
	DEBUGINFO_VARS: load = RAM, type = bss;
	DEBUGINFO_BSS:  load = RAM, type = bss;
	COPYBUFF_VARS:  load = RAM, type = bss, define = yes;
	CONSOLE_VARS:   load = RAM, type = bss;
	MACRO_VARS:     load = RAM, type = bss;
	LINKER_VARS:   load = RAM, type = bss, define = yes;

	# the following BSS segments may live in the REU
	DEBUGINFO:    load = RAM, type = bss;
	COPYBUFF_BSS: load = RAM, type = bss, define = yes;
	CONSOLE_BSS:  load = RAM, type = bss;
	MACROBSS:     load = RAM, type = bss;
	SOURCE:       load = RAM, type = bss;
	EXPR_BSS:     load = RAM, type = bss;
	LINKER_BSS:   load = RAM, type = bss, define = yes;

	LABEL_BSS:    load = LABELS_BANK, type = bss;
	LABELNAMES:   load = LABELS_BANK, type = bss;

	OBJBSS:       load = OBJ_BANK, type = bss, define = yes;
}
