SYMBOLS {
  # the maximum size of a single line (also the size of the line buffer)
  __LINESIZE__:  type = export, value = 40;
}

MEMORY {
  CART:
    start = $a000
    size = $2000
    fill = no;

  INIT:
    start = $1100
    size = $6f00
    fill = no;

  RAM:
    start = $2000
    size = $8000;

  NMI_HANDLER:
    start = $8000 - 17
    size = 17;

  APPRAM:
    start = $2000
    size  = $6000-63;

  HIRAM:
    start = $a000
    size  = $2000;

  MACRO:
    start = $a000
    size  = $2000;

  LINKER:
    start = $a000
    size  = $2000;

  OBJ:
    start = $a000
    size  = $2000;

  LABELS:
    start = $a000
    size  = $2000;

  LABELNAMES:
    start = $2000
    size  = $6000;

  OBJDATA:
    start = $2000
    size  = $6000;

  FTXT:
    start = $b000
    size  = $1000;

  FCPY:
    start = $2000
    size  = $6000;

  UDGEDIT:
    start = $a000
    size  = $2000;

  CONSOLE:
    start = $a000
    size  = $2000;

  COPYBUFF:
    start = $a000
    size  = $2000;

  SOURCE:
    start = $2000
    size  = $6000;

  DEBUGINFO_BUFF:
    start = $2000
    size  = $6000;

  DEBUGINFO:
    start = $a000
    size  = $2000;

  VSCREEN:
    start = $2000
    size  = $5f00;

  SHARERAM:
    start = $33c
    size  = $c4;

  LINEBUFFER:
    start = $400
    size = __LINESIZE__*3+1;	# 1 line + backup + assembly buffer

  SPARE:
    start = $500
    size = $800;

  SHARERAM2:
    start = $479
    size = $87;

  SHARE:
    start = $a00
    size  = $600;

  CART20:
    start = $a000
    size = $2000;

  BOOT:
    start = $1100
    size  = $6f00;
}

SEGMENTS {
	# setup
	CART:   load = CART, run = CART, type = ro, define = yes;
	SETUP:  load = INIT, run = BOOT, define = yes;
	DATA:   load = INIT, run = HIRAM, type = rw, define = yes;
	IRQ:    load = INIT, run = SHARERAM, type = ro, define = yes;
	SHAREBSS: load = SHARE, type = bss;
	LINEBUFF: load = LINEBUFFER, type = bss;
	SPARE: load = SPARE, type = bss;

	# shared bank code
	BANKCODE: load = INIT, run = SHARERAM, define = yes;
	BANKCODE2: load = INIT, run = SHARERAM2, define = yes;

	# BANK $01
	DEBUGGER:  load = RAM, run = APPRAM, type=rw, define = yes;
	CODE:   load = RAM, run = APPRAM, type = ro, define = yes;
	RODATA: load = INIT, run = HIRAM, type = ro, define = yes;

	NMI_HANDLER: load = RAM, type=bss, define = yes;

	# BSS
	BSS:      load = HIRAM, type = bss, define = yes;

	SOURCE: load = SOURCE, type = bss;

	# BANK $02
	DEBUGINFO: load = DEBUGINFO_BUFF, type = bss;
	DEBUGINFO_VARS: load = DEBUGINFO, run = DEBUGINFO, type = bss;
	DEBUGINFO_BSS: load = DEBUGINFO, run = DEBUGINFO, type = bss;
	DEBUGINFO_CODE: load = INIT, run = DEBUGINFO, type = rw, define = yes;

	# BANK $05
	UDGEDIT: load = INIT, run = UDGEDIT, type = ro, define = yes;

	# BANK $0C
	# VSCREEN resides above the physical bitmap (at $2000)
	VSCREEN_BSS: load = VSCREEN, type = bss;
	VSCREEN: load = INIT, run = VSCREEN, type = ro, define = yes;

	# BANK $0E
	FASTTEXT: load = INIT, run = FTXT, type = ro, define = yes;
	FASTTEXT_BSS: load = FTXT, type = bss;

	# BANK $04
	MACROCODE: load = INIT, run = MACRO, type = ro, define = yes;
	MACRO_VARS: load = MACRO, type = bss;
	MACROBSS: load = MACRO, type = bss;

	# BANK $06
	LINKER: load = INIT, run = LINKER, type = ro, define = yes;
	LINKER_VARS: load = LINKER, type = bss, define = yes;
	LINKER_BSS: load = LINKER, type = bss, define = yes;
	OBJCODE: load = INIT, run = OBJ, type = ro, define = yes;
	OBJBSS: load = OBJDATA, type = bss, define = yes;

	# BANK $07
	CONSOLE: load = INIT, run = CONSOLE, type = ro, define = yes;
	CONSOLE_BSS: load = CONSOLE, type = bss;
	CONSOLE_VARS: load = CONSOLE, type = bss;

	# BANK $08
	COPYBUFF: load = INIT, run = COPYBUFF, type = ro, define = yes;
	COPYBUFF_VARS: load = COPYBUFF, type = bss, define = yes;
	COPYBUFF_BSS: load = COPYBUFF, type = bss, define = yes;

	# BANK $0D
	LABEL_BSS: load = LABELS, type = bss;
	LABEL_VARS: load = LABELS, type = bss;
	LABELS: load = INIT, run = LABELS, type = ro, define = yes;
	LABELNAMES: load = LABELNAMES, type = bss;

	# BANK $0E
	FASTCOPY_BSS: load = FCPY, type = bss;
	FASTCOPY: load = INIT, run = FCPY, type = ro, define = yes;
}
